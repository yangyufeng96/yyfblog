<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>峰享会</title>
  
  <subtitle>漫道求索</subtitle>
  <link href="/./atom.xml" rel="self"/>
  
  <link href="https://yangyfeng.github.io/"/>
  <updated>2021-03-06T15:36:24.248Z</updated>
  <id>https://yangyfeng.github.io/</id>
  
  <author>
    <name>漫道求索</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>可视化定制开发</title>
    <link href="https://yangyfeng.github.io//posts/aab0fbb9.html"/>
    <id>https://yangyfeng.github.io//posts/aab0fbb9.html</id>
    <published>2021-03-04T16:00:00.000Z</published>
    <updated>2021-03-06T15:36:24.248Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;定制开发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用户业务需求为基础，设计出客户满意的方案，前端根据设计图1:1完成开发。&lt;/p&gt;
&lt;p&gt;包括各类图表展示元素，地理位置信息展示单元（Gis、矢量、3d地球等），交互效果（酷炫动画，用户交互，展示效果等），实数数据监控
        
      
    
    </summary>
    
      <category term="个人项目" scheme="https://yangyfeng.github.io/blogpost/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="数据可视化" scheme="https://yangyfeng.github.io/blogpost/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="Vue" scheme="https://yangyfeng.github.io/blogpost/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>应急管理中心 刑侦案件地理信息可视化展示系统</title>
    <link href="https://yangyfeng.github.io//posts/f2d2e0b4.html"/>
    <id>https://yangyfeng.github.io//posts/f2d2e0b4.html</id>
    <published>2021-03-04T16:00:00.000Z</published>
    <updated>2021-03-05T07:10:53.292Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="个人项目" scheme="https://yangyfeng.github.io/blogpost/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="vue" scheme="https://yangyfeng.github.io/blogpost/tags/vue/"/>
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>QTV2直播商城</title>
    <link href="https://yangyfeng.github.io//posts/b1fde4c6.html"/>
    <id>https://yangyfeng.github.io//posts/b1fde4c6.html</id>
    <published>2021-03-03T16:00:00.000Z</published>
    <updated>2021-03-05T06:20:52.176Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目描述&quot;&gt;&lt;a href=&quot;#项目描述&quot; class=&quot;headerlink&quot; title=&quot;项目描述&quot;&gt;&lt;/a&gt;项目描述&lt;/h2&gt;&lt;p&gt;QTV-2直播生活供货商入驻系统，运行在微信公众号， 集资讯短视频，电商直播，购物商城为一体的青岛广电生活服务平台 。 其功能主要有直播打赏，直播抽奖，会员制，商品分享，弹幕评论等。微信搜索“QTV蛤蜊帮”，即可进入。 &lt;/p&gt;
&lt;h2 id=&quot;系统结构说明&quot;&gt;&lt;a href=&quot;#系统结构说明&quot; class=&quot;headerlink&quot; title=&quot;系统结构说明&quot;&gt;&lt;/a&gt;系统结构说明&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;核心模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/6VwFh9&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/04/6VwFh9.md.png&quot; alt=&quot;6VwFh9.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;业务架构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/6ehCSx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/05/6ehCSx.md.png&quot; alt=&quot;6ehCSx.md.png&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://imgtu.com/i/6ehpf1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/05/6ehpf1.md.png&quot; alt=&quot;6ehpf1.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;业务介绍&quot;&gt;&lt;a href=&quot;#业务介绍&quot; class=&quot;headerlink&quot; title=&quot;业务介绍&quot;&gt;&lt;/a&gt;业务介绍&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;产品分类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;推荐、大牌MALL（商超大牌）、扶农助农、工厂清仓、母婴亲子、美食美味、珠光宝气、潮搭攻略、乐家生活、美妆心得等&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/6V0Nx1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/04/6V0Nx1.md.png&quot; alt=&quot;6V0Nx1.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="个人项目" scheme="https://yangyfeng.github.io/blogpost/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="vue" scheme="https://yangyfeng.github.io/blogpost/tags/vue/"/>
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>华北电力控制系统</title>
    <link href="https://yangyfeng.github.io//posts/763ea06e.html"/>
    <id>https://yangyfeng.github.io//posts/763ea06e.html</id>
    <published>2021-02-22T16:00:00.000Z</published>
    <updated>2021-03-04T07:57:15.327Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目概况&quot;&gt;&lt;a href=&quot;#项目概况&quot; class=&quot;headerlink&quot; title=&quot;项目概况&quot;&gt;&lt;/a&gt;项目概况&lt;/h2&gt;&lt;p&gt;数据可视化展示与开发中心，通过开发可视化设计器、可视化展示引擎、可视化控制平台、可视化后台服务及音视屏驱动软件，用于全方面、多角度展示智能发电运行控制系统整体架构与主要功能，开展发电设备三维可视化、发电过程音视频数据分析、状态识别与故障定位算法研究，最终形成“多业务，多窗口，多交互手段，少人工”的数据驾驶舱系统。&lt;/p&gt;
&lt;h2 id=&quot;系统架构&quot;&gt;&lt;a href=&quot;#系统架构&quot; class=&quot;headerlink&quot; title=&quot;系统架构&quot;&gt;&lt;/a&gt;系统架构&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/6V6DdP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/04/6V6DdP.md.png&quot; alt=&quot;6V6DdP.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;总体应用框架分为六层框架结构，提供两类支撑，分别是“网络层”、“数据层”、“应用层”、“业务层”、“交互层”、“表现层”，支撑为“标准规范”与“硬件体系”。&lt;/p&gt;
&lt;h2 id=&quot;系统业务&quot;&gt;&lt;a href=&quot;#系统业务&quot; class=&quot;headerlink&quot; title=&quot;系统业务&quot;&gt;&lt;/a&gt;系统业务&lt;/h2&gt;&lt;p&gt;业务主要包括，工业指标的数据可视化展示（数据监测），设备的精准控制（手动，阀值报警或制动，语音智能控制），对数据的多类方式分析并给出高价值结果，各类测试数据下指标对比（灵活筛选对比的指标），以及用户权限控制，报表分析与下载，3d场景下的工业数据的可视化展示等。&lt;/p&gt;
    
    </summary>
    
      <category term="个人项目" scheme="https://yangyfeng.github.io/blogpost/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="vue" scheme="https://yangyfeng.github.io/blogpost/tags/vue/"/>
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="数据可视化" scheme="https://yangyfeng.github.io/blogpost/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>国珍知识库管理系统</title>
    <link href="https://yangyfeng.github.io//posts/d02d7caa.html"/>
    <id>https://yangyfeng.github.io//posts/d02d7caa.html</id>
    <published>2021-02-22T16:00:00.000Z</published>
    <updated>2021-03-05T06:33:50.967Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;项目描述&quot;&gt;&lt;a href=&quot;#项目描述&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="个人项目" scheme="https://yangyfeng.github.io/blogpost/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="vue" scheme="https://yangyfeng.github.io/blogpost/tags/vue/"/>
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>风力发电SCADA</title>
    <link href="https://yangyfeng.github.io//posts/fa28e10b.html"/>
    <id>https://yangyfeng.github.io//posts/fa28e10b.html</id>
    <published>2021-02-22T16:00:00.000Z</published>
    <updated>2021-03-04T03:34:45.643Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是SCADA&quot;&gt;&lt;a href=&quot;#什么是SCADA&quot; class=&quot;headerlink&quot; title=&quot;什么是SCADA&quot;&gt;&lt;/a&gt;什么是SCADA&lt;/h2&gt;&lt;p&gt;SCADA系统，即数据采集与监视控制系统。SCADA系统是以计算机为基础的DCS与电力自动化监控系统；它应用领域很广，可以应用于电力、冶金、石油、化工、燃气、铁路等领域的数据采集与监视控制以及过程控制等诸多领域。其功能主要围绕生产数据实时采集、生产设备过程监控、生产设备异常报警、数据分析、数据报表及仪表盘展示四个方面进行，其特性主要体现以下几个方面：&lt;/p&gt;
&lt;p&gt;1、支持5000多种通讯协议，满足市场上百分之99.99的控制器、仪器仪表的通讯要求。打通自动化硬件系统与信息化软件系统信息传递。&lt;br&gt;2、将办公网络IP与工业设备IP进行硬件隔离，避免IP冲突。&lt;br&gt;3、直观展示生产动态，对现场设备实现直接或间接控制，满足可视化管理的需求。&lt;br&gt;4、进行数据统计分析，并通过仪表盘进行展示。&lt;/p&gt;
&lt;h2 id=&quot;项目描述&quot;&gt;&lt;a href=&quot;#项目描述&quot; class=&quot;headerlink&quot; title=&quot;项目描述&quot;&gt;&lt;/a&gt;项目描述&lt;/h2&gt;&lt;p&gt;风力发电厂的安全监测平台。将SCADA和IT运维监控内容融与数据可视化相融合形成安全监测平台。分别有数据可视化、SACDA、IT运维监控和基本功能4个主要功能模块。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;数据可视化：&lt;/em&gt;&lt;/strong&gt;主要提供前端展示内容，包括3D、2D建模和图表元素，形成沉浸式的监控展示体系，将业务、告警等相融合。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;SCADA：&lt;/em&gt;&lt;/strong&gt;将SCADA的原有功能和信息发布功能相结合，对升压站、风机进行实时数据监控，形成数据采集、分析、监控和预警的统一功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;IT运维监测：&lt;/em&gt;&lt;/strong&gt;对机房网络和服务进行整体的监控。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;基本功能：&lt;/em&gt;&lt;/strong&gt;账号管理、权限管理、部门管理和角色管理等内容。&lt;/p&gt;
&lt;p&gt;建设要求遵循了灵活性和可扩展性原则，能够适应业务变化和进步的要求，满足同行业电厂业务要求。平台系统所采用的相关标准必须与国际、国家、省、市级及行业标准相符合，确保系统具有良好的开放性，能实现与多种技术和软硬件平台的有机集成。&lt;/p&gt;
&lt;p&gt;对于用户而言，解决了在业务中一些棘手问题，如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;运营管理场景：&lt;/em&gt;&lt;/strong&gt;对变电站和风机进行全面的监控，提供直观高效的数据展现形式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;预警告警：&lt;/em&gt;&lt;/strong&gt;对预警和告警信息作出实时数据监控并发送相应的告警信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;运维支撑：&lt;/em&gt;&lt;/strong&gt;对业务运维和IT运维人员提供及时的信息提醒和展示，便于运维人员及时有效的进行电厂的整体维护。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;培训人员：&lt;/em&gt;&lt;/strong&gt;减少员工培训成本，快速理解电厂业务和相关工作岗位，增加员工的业务熟练程度和应急处理能力。&lt;/p&gt;
    
    </summary>
    
      <category term="个人项目" scheme="https://yangyfeng.github.io/blogpost/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="vue" scheme="https://yangyfeng.github.io/blogpost/tags/vue/"/>
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="数据可视化" scheme="https://yangyfeng.github.io/blogpost/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>大数据可视化系统</title>
    <link href="https://yangyfeng.github.io//posts/5f998618.html"/>
    <id>https://yangyfeng.github.io//posts/5f998618.html</id>
    <published>2021-02-02T01:22:00.000Z</published>
    <updated>2021-03-05T07:31:00.080Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目描述&quot;&gt;&lt;a href=&quot;#项目描述&quot; class=&quot;headerlink&quot; title=&quot;项目描述&quot;&gt;&lt;/a&gt;项目描述&lt;/h2&gt;&lt;p&gt;一套数据可视化展示平台，支持多种数据源类型（CSV静态文件，数据库连接，Http接口，JSON静态数据，WebSocket连接）。拥有多种酷炫图表和动画，同时支持本地化部署，镜像保存，分享，权限控制等。支持自定义图表上传，支持多种可视化插件，如Echarts，D3，AntV等。3D可视化功能目前只支持Unity3D引擎。&lt;/p&gt;
&lt;h2 id=&quot;系统简介&quot;&gt;&lt;a href=&quot;#系统简介&quot; class=&quot;headerlink&quot; title=&quot;系统简介&quot;&gt;&lt;/a&gt;系统简介&lt;/h2&gt;&lt;p&gt;探索您拥有的所有数据，发现新的模式，创造丰富的视觉效果来共享洞察。利用该系统易于使用的分析和商业智能工具，您能够：&lt;/p&gt;
&lt;p&gt;①　快速获得信息概览，更快的通过可视化探索所有相关数据，飞速获取洞察。发现未知模式识别关键的联系，发现隐藏的机会。&lt;/p&gt;
&lt;p&gt;②　看到数据，理解数据，通过炫目的可视化方式，快速理解数据所表明的一切。基于分析的交互可视化让每个人都可以理解分析结果。&lt;/p&gt;
&lt;p&gt;③　停止猜测，更智慧地工作，简化数据准备。软件自动突出显示相关的重要发现，无需编程。&lt;/p&gt;
&lt;h2 id=&quot;功能详解&quot;&gt;&lt;a href=&quot;#功能详解&quot; class=&quot;headerlink&quot; title=&quot;功能详解&quot;&gt;&lt;/a&gt;功能详解&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;登录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/yHG0ln&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/02/22/yHG0ln.md.png&quot; alt=&quot;yHG0ln.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;项目只支持内网部署版本，未发版sass平台。&lt;/p&gt;
&lt;p&gt;用户有管理员逐一分配，适合多类企业的需求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可视化大屏列表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;展示方式有两种：卡片模式、列表模式&lt;/p&gt;
&lt;p&gt;卡片模式可以获取大屏内部的画面作为预览图或者用户自己设置封面&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/6EpKA0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/03/6EpKA0.md.png&quot; alt=&quot;6EpKA0.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/yHG3OP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/02/22/yHG3OP.md.png&quot; alt=&quot;yHG3OP.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;之外每个大屏都可以锁定（设置密码）、发布、预览、复制、编辑等功能。&lt;/p&gt;
&lt;p&gt;左上角的创建按钮，跳转到创建大屏页面，创建时可选择模板、空白的任意比例的大屏，以及加入到多选分类中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可视化大屏配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/6E9MqA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/03/6E9MqA.md.png&quot; alt=&quot;6E9MqA.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在上方选择需要的图表拖入到中间画布，即可在右侧配置对应属性和数据，并能加入到收藏，供后面使用。&lt;/p&gt;
&lt;p&gt;其中在使用数据时，选择创建的数据源，然后做好字段映射即可，非常方便。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;离线部署&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;适配非常规拼接大屏，支持加密发布，支持本地部署，数据无需上传至第三方服务器或云端，私密数据的安全性更有保障。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多种数据源支持&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;支持接入关系型数据库、本地CSV上传和在线API等，支持动态请求，多服务平台信息可视化呈现。 &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/6E15T0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/03/6E15T0.md.png&quot; alt=&quot;6E15T0.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以及可以使用用户自定义的数据做为数据源在图表上使用。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/6E3w3F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/03/6E3w3F.md.png&quot; alt=&quot;6E3w3F.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据源跨平台兼容&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;兼容各种数据源类型，支持海量数据。可连接公司各种各样业务管理系统、第三方平台互联网技术统计数据、电子表格等数据文件以及公共数据综合服务平台，轻松整合所有相关业务数据，帮助企业消除数据孤岛。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用户权限控制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;RBAC控制，以及数据的用户绑定，用户创建的数据源只能为单用户使用，使数据更加安全和独立。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/6E3oDA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/03/6E3oDA.md.png&quot; alt=&quot;6E3oDA.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3D可视化&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;我们不仅提供全周期模型资源支持，还可以通过设计师灵动设计的场景模型与现实设备进行数据互通与联动，真正实现3D万物可视，还支持3D地图等效果，支持地理数据多层叠加。 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;支持多种图表效果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;支持各类图表，折线，点，柱，地图等都有涉及，支持多种可视化图表库，echarts，highcharts，d3，g2等。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com/i/6AztxJ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/03/03/6AztxJ.md.png&quot; alt=&quot;6AztxJ.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据下钻和上浮&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;支持多图表数据联动，以及下钻和上浮&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/yHG6TU&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2021/02/22/yHG6TU.md.png&quot; alt=&quot;yHG6TU.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="个人项目" scheme="https://yangyfeng.github.io/blogpost/categories/%E4%B8%AA%E4%BA%BA%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="vue" scheme="https://yangyfeng.github.io/blogpost/tags/vue/"/>
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="数据可视化" scheme="https://yangyfeng.github.io/blogpost/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>2021年前端重修课</title>
    <link href="https://yangyfeng.github.io//posts/cf2c43d.html"/>
    <id>https://yangyfeng.github.io//posts/cf2c43d.html</id>
    <published>2021-02-01T16:00:00.000Z</published>
    <updated>2021-02-02T01:27:12.592Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;2021年前端重修课&quot;&gt;&lt;a href=&quot;#2021年前端重修课&quot; class=&quot;headerlink&quot; title=&quot;2021年前端重修课&quot;&gt;&lt;/a&gt;2021年前端重修课&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/ymtXrR&quot;
        
      
    
    </summary>
    
      <category term="深入前端" scheme="https://yangyfeng.github.io/blogpost/categories/%E6%B7%B1%E5%85%A5%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="https://yangyfeng.github.io/blogpost/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Babel转码器</title>
    <link href="https://yangyfeng.github.io//posts/390a51fc.html"/>
    <id>https://yangyfeng.github.io//posts/390a51fc.html</id>
    <published>2021-01-07T16:00:00.000Z</published>
    <updated>2021-01-11T05:06:55.760Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt; &lt;a href=&quot;https://babeljs.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Babel&lt;/a&gt; 是一个广泛使用的 ES6 转码器(下一代的JavaScript编译器)，可以将 ES6 代码转为 ES5
        
      
    
    </summary>
    
      <category term="Es6" scheme="https://yangyfeng.github.io/blogpost/categories/Es6/"/>
    
    
  </entry>
  
  <entry>
    <title>globalThis对象</title>
    <link href="https://yangyfeng.github.io//posts/180dd8a3.html"/>
    <id>https://yangyfeng.github.io//posts/180dd8a3.html</id>
    <published>2021-01-07T16:00:00.000Z</published>
    <updated>2021-01-08T03:37:10.534Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt; JavaScript 语言存在一个顶层对象，它提供全局环境（即全局作用域），所有代码都是在这个环境中运行。但是，顶层对象在各种实现里面是不统一的。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器里面，顶层对象是&lt;code&gt;window&lt;/code&gt;，但 Node 和 Web
        
      
    
    </summary>
    
      <category term="Es6" scheme="https://yangyfeng.github.io/blogpost/categories/Es6/"/>
    
    
  </entry>
  
  <entry>
    <title>js 优化for循环-Duff装置</title>
    <link href="https://yangyfeng.github.io//posts/ef7302f6.html"/>
    <id>https://yangyfeng.github.io//posts/ef7302f6.html</id>
    <published>2020-12-23T16:00:00.000Z</published>
    <updated>2020-12-24T08:41:04.790Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;循环是编程中常见的结构，在javaScript程序中同样随处可见。当我们要处理的数据集很大时，for循环的优化就显得格外重要了。 &lt;/p&gt;
&lt;p&gt; 如下是一个常见的for循环： &lt;/p&gt;
&lt;figure class=&quot;highlight
        
      
    
    </summary>
    
      <category term="深入前端" scheme="https://yangyfeng.github.io/blogpost/categories/%E6%B7%B1%E5%85%A5%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="for循环" scheme="https://yangyfeng.github.io/blogpost/tags/for%E5%BE%AA%E7%8E%AF/"/>
    
  </entry>
  
  <entry>
    <title>V8引擎是如何运行JS</title>
    <link href="https://yangyfeng.github.io//posts/cf2c43d.html"/>
    <id>https://yangyfeng.github.io//posts/cf2c43d.html</id>
    <published>2020-12-21T16:00:00.000Z</published>
    <updated>2020-12-22T09:55:33.925Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;什么是V8引擎&quot;&gt;&lt;a href=&quot;#什么是V8引擎&quot; class=&quot;headerlink&quot; title=&quot;什么是V8引擎&quot;&gt;&lt;/a&gt;什么是V8引擎&lt;/h2&gt;&lt;p&gt;一个接受JavaScript代码，编译代码然后执行的C++
        
      
    
    </summary>
    
      <category term="深入前端" scheme="https://yangyfeng.github.io/blogpost/categories/%E6%B7%B1%E5%85%A5%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="https://yangyfeng.github.io/blogpost/tags/javascript/"/>
    
      <category term="JS运行原理" scheme="https://yangyfeng.github.io/blogpost/tags/JS%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/"/>
    
      <category term="V8引擎" scheme="https://yangyfeng.github.io/blogpost/tags/V8%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>javascript是如何被运行的</title>
    <link href="https://yangyfeng.github.io//posts/81adf3b6.html"/>
    <id>https://yangyfeng.github.io//posts/81adf3b6.html</id>
    <published>2020-12-21T16:00:00.000Z</published>
    <updated>2020-12-22T09:32:47.499Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JS的语言组成&quot;&gt;&lt;a href=&quot;#JS的语言组成&quot; class=&quot;headerlink&quot; title=&quot;JS的语言组成&quot;&gt;&lt;/a&gt;JS的语言组成&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;基本语法：C&lt;/li&gt;
&lt;li&gt;数据类型 内存管理：Java&lt;/li&gt;
&lt;li&gt;函数式编程：Scheme  函数是第一等公民&lt;/li&gt;
&lt;li&gt;原型继承：Self   基于原型prototype的继承机制&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;奇葩的JS&quot;&gt;&lt;a href=&quot;#奇葩的JS&quot; class=&quot;headerlink&quot; title=&quot;奇葩的JS&quot;&gt;&lt;/a&gt;奇葩的JS&lt;/h2&gt;&lt;p&gt;对于熟悉javascript语言的前端开发小伙伴，直接上来两张图&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/rrE9Gq&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/22/rrE9Gq.md.png&quot; alt=&quot;rrE9Gq.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/rrEALF&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/22/rrEALF.md.png&quot; alt=&quot;rrEALF.md.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;是不是瞬间感觉头脑发热呢。&lt;/p&gt;
&lt;p&gt;之所以会出现这些诡异的问题，是因为javascript是在设计之初并没有考虑的完善，是借鉴了多种语言的模式，基本是融合了面向过程和面向对象的。&lt;/p&gt;
    
    </summary>
    
      <category term="深入前端" scheme="https://yangyfeng.github.io/blogpost/categories/%E6%B7%B1%E5%85%A5%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="https://yangyfeng.github.io/blogpost/tags/javascript/"/>
    
      <category term="JS运行原理" scheme="https://yangyfeng.github.io/blogpost/tags/JS%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>互联网是如何运作的</title>
    <link href="https://yangyfeng.github.io//posts/c35109d5.html"/>
    <id>https://yangyfeng.github.io//posts/c35109d5.html</id>
    <published>2020-12-21T16:00:00.000Z</published>
    <updated>2020-12-22T09:32:31.314Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;互联网所有的传输都通过RCP/IP协议族来传输，TCP/IP是&lt;strong&gt;面向连接&lt;/strong&gt;的&lt;strong&gt;可靠&lt;/strong&gt;字节流服务协议&lt;/p&gt;
&lt;h2 id=&quot;什么是协议&quot;&gt;&lt;a href=&quot;#什么是协议&quot; class=&quot;headerlink&quot; title=&quot;什么是协议&quot;&gt;&lt;/a&gt;什么是协议&lt;/h2&gt;&lt;p&gt;协议是一组&lt;strong&gt;规则&lt;/strong&gt;，用于指定计算机应该如何通过网络来交互通信&lt;/p&gt;
&lt;h2 id=&quot;TCP-IP协议族&quot;&gt;&lt;a href=&quot;#TCP-IP协议族&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP协议族&quot;&gt;&lt;/a&gt;TCP/IP协议族&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;有四层&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用层：提供特定于应用程序的协议  HTTP   FTP   IMAP(邮件)&lt;/li&gt;
&lt;li&gt;网络控制层： 发送数据包到计算机上使用特定的端口号的应用程序&lt;/li&gt;
&lt;li&gt;网络层： 使用IP地址将数据包发送到特定的计算&lt;/li&gt;
&lt;li&gt;链路层：  将二进制数据包与网络信号相互之间转换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;TCP的可靠&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;tcp在建立连接会进行三次握手，每个收到的数据包都会向发送方发送ack确认，已确保发送成功&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IP的传输&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IP是不可靠的无连接协议，它并不关心数据包是否到达目的地，也不关系连接和端口号，目的是连接到目标IP&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/rDwiod&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/22/rDwiod.png&quot; alt=&quot;rDwiod.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TCP传输的质量和顺序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当数据包过大，在网络层会进行分包，分包后传输的链路不一样，到达的时间不一样，TCP会根据数据包上携带序列号来进行排序重组，如果发送方在一个特定时间内（也就是重试时间）没有接受到接收方的ack确认，会再次重新发送&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IP和IP地址的区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ip是一种协议  有两种标准  IPv4 2^32次方和IPv6  2^128&lt;/p&gt;
&lt;p&gt;IP地址是一串数字192.0.0.1&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/rDaLgf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/22/rDaLgf.png&quot; alt=&quot;rDaLgf.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/rDajKS&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/22/rDajKS.png&quot; alt=&quot;rDajKS.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="深入前端" scheme="https://yangyfeng.github.io/blogpost/categories/%E6%B7%B1%E5%85%A5%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="tcp" scheme="https://yangyfeng.github.io/blogpost/tags/tcp/"/>
    
      <category term="http" scheme="https://yangyfeng.github.io/blogpost/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>浏览器是如何运作的</title>
    <link href="https://yangyfeng.github.io//posts/41e3ecae.html"/>
    <id>https://yangyfeng.github.io//posts/41e3ecae.html</id>
    <published>2020-12-21T16:00:00.000Z</published>
    <updated>2020-12-22T09:32:34.662Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;浏览器是多进程结构的&quot;&gt;&lt;a href=&quot;#浏览器是多进程结构的&quot; class=&quot;headerlink&quot; title=&quot;浏览器是多进程结构的&quot;&gt;&lt;/a&gt;浏览器是多进程结构的&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;进程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;操作系统进行资源分配和调度的基本单元。可以申请和拥有计算机资源，进程是程序的基本执行实体。两个进程分配的资源和内存是独立，如果需要通信就要使用进程通信管道IPC来传递信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;操作系统能够进行运算调度的最小单位，一个进程中可以并发多个线程，每条线程并行执行不同的任务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;浏览器功能进程拆解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/rDbTde&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/22/rDbTde.png&quot; alt=&quot;rDbTde.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;浏览器进程&lt;/p&gt;
&lt;p&gt;控制除标签页外的用户界面，包括地址，书签，后退，前进按钮等，以及负责与浏览器其他进程负责协调工作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;缓存进程&lt;/p&gt;
&lt;p&gt;负责控制浏览器的存储数据的缓存和读取&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;网络进程 &lt;/p&gt;
&lt;p&gt;发起和接受网络请求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;渲染器进程 &lt;/p&gt;
&lt;p&gt;渲染Tab  有可能会为每个标签页是一个渲染进程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GPU进程&lt;/p&gt;
&lt;p&gt;整个浏览器界面的渲染&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;插件进程&lt;/p&gt;
&lt;p&gt;控制网站使用的所有内置插件，例如：flash&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;浏览器结构图&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/rDoRuF&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://s3.ax1x.com/2020/12/22/rDoRuF.png&quot; alt=&quot;rDoRuF.png&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;用户界面：展示除了标签页窗口之外的其他用户用户界面内容&lt;/p&gt;
&lt;p&gt;渲染引擎：渲染用户获取数据的渲染内容。一下还有很多小的功能模块，如负责网络请求的网络模块，用于解析和执行js的js解释器&lt;/p&gt;
&lt;p&gt;浏览器引擎：用户界面和渲染引擎之间传递数据&lt;/p&gt;
&lt;p&gt;数据持久层：帮助浏览器存储持久数据，如cokies和storage。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们称呼的内核就是指的渲染引擎，是整个浏览器的核心和灵魂&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Chromium会给用户创建的每一个访问实例分配一个进程，确保每一个页面是独立呈现的，并且对每个网站的独立访问也是彼此隔离的。访问不同站点和同一站点的不同页面都会创建新的进程。一个标签就是一个新的渲染器进程。&lt;/p&gt;
    
    </summary>
    
      <category term="深入前端" scheme="https://yangyfeng.github.io/blogpost/categories/%E6%B7%B1%E5%85%A5%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="浏览器运行原理" scheme="https://yangyfeng.github.io/blogpost/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>js的事件循环是什么</title>
    <link href="https://yangyfeng.github.io//posts/62b88241.html"/>
    <id>https://yangyfeng.github.io//posts/62b88241.html</id>
    <published>2020-12-21T16:00:00.000Z</published>
    <updated>2020-12-22T09:32:51.778Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;事件循环的机制&quot;&gt;&lt;a href=&quot;#事件循环的机制&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="深入前端" scheme="https://yangyfeng.github.io/blogpost/categories/%E6%B7%B1%E5%85%A5%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="event loop" scheme="https://yangyfeng.github.io/blogpost/tags/event-loop/"/>
    
  </entry>
  
  <entry>
    <title>什么是JS调用栈</title>
    <link href="https://yangyfeng.github.io//posts/9926a09c.html"/>
    <id>https://yangyfeng.github.io//posts/9926a09c.html</id>
    <published>2020-12-21T16:00:00.000Z</published>
    <updated>2020-12-22T09:32:41.337Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;概念&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;栈：先进后出，进栈，出栈，与堆栈不同&lt;/p&gt;
&lt;p&gt;队列：先进先出&lt;/p&gt;
&lt;p&gt;调用栈是JS引擎追踪函数执行流程的一种机制，当执行环境中调用了多个函数时，通过这种机制，我们能够追踪到哪个函数正在执行，执行的函数体又调用
        
      
    
    </summary>
    
      <category term="深入前端" scheme="https://yangyfeng.github.io/blogpost/categories/%E6%B7%B1%E5%85%A5%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JS运行原理" scheme="https://yangyfeng.github.io/blogpost/tags/JS%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>vue面试题（2）</title>
    <link href="https://yangyfeng.github.io//posts/e210f74f.html"/>
    <id>https://yangyfeng.github.io//posts/e210f74f.html</id>
    <published>2020-12-20T16:00:00.000Z</published>
    <updated>2020-12-22T09:31:20.043Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;v-if和v-for哪个优先级更高？&quot;&gt;&lt;a href=&quot;#v-if和v-for哪个优先级更高？&quot; class=&quot;headerlink&quot; title=&quot;v-if和v-for哪个优先级更高？&quot;&gt;&lt;/a&gt;v-if和v-for哪个优先级更高？&lt;/h2&gt;&lt;p&gt; 分析：此题考查常识，文档中曾有&lt;a href=&quot;https://cn.vuejs.org/v2/style-guide/#避免-v-if-和-v-for-用在一起必要&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;详细说明&lt;/a&gt;；也是一个很好的实践题目，项目中经常会遇到，能够看出面试者应用能力。 &lt;/p&gt;
&lt;p&gt;思路分析：总分总模式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先给出结论&lt;/li&gt;
&lt;li&gt;为什么是这样的&lt;/li&gt;
&lt;li&gt;它们能放一起吗&lt;/li&gt;
&lt;li&gt;如果不能，那应该怎样&lt;/li&gt;
&lt;li&gt;总结&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;回答范例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;v-for优先于v-if被解析&lt;/li&gt;
&lt;li&gt;我曾经做过实验，把它们放在一起，输出的渲染函数中可以看出会先执行循环再判断条件&lt;/li&gt;
&lt;li&gt;实践中也不应该把它们放一起，因为哪怕我们只渲染列表中一小部分元素，也得在每次重渲染的时候遍历整个列表。&lt;/li&gt;
&lt;li&gt;通常有两种情况下导致我们这样做：&lt;ul&gt;
&lt;li&gt;为了过滤列表中的项目 (比如 &lt;code&gt;v-for=&amp;quot;user in users&amp;quot; v-if=&amp;quot;user.isActive&amp;quot;&lt;/code&gt;)。此时定义一个计算属性 (比如 &lt;code&gt;activeUsers&lt;/code&gt;)，让其返回过滤后的列表即可。&lt;/li&gt;
&lt;li&gt;为了避免渲染本应该被隐藏的列表 (比如 &lt;code&gt;v-for=&amp;quot;user in users&amp;quot; v-if=&amp;quot;shouldShowUsers&amp;quot;&lt;/code&gt;)。此时把 &lt;code&gt;v-if&lt;/code&gt; 移动至容器元素上 (比如 &lt;code&gt;ul&lt;/code&gt;、&lt;code&gt;ol&lt;/code&gt;)即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文档中明确指出&lt;strong&gt;永远不要把 &lt;code&gt;v-if&lt;/code&gt; 和 &lt;code&gt;v-for&lt;/code&gt; 同时用在同一个元素上&lt;/strong&gt;，显然这是一个重要的注意事项。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;看过源码里面关于代码生成的部分&lt;/p&gt;
&lt;p&gt;知其所以然： &lt;/p&gt;
&lt;p&gt;做个测试&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ƒ anonymous() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _c(&lt;span class=&quot;string&quot;&gt;&#39;div&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      attrs: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, _l((items), &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (item.isActive) ? _c(&lt;span class=&quot;string&quot;&gt;&#39;div&#39;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        key: item.id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;, [_v(&lt;span class=&quot;string&quot;&gt;&quot;\n      &quot;&lt;/span&gt; + _s(item.name) + &lt;span class=&quot;string&quot;&gt;&quot;\n    &quot;&lt;/span&gt;)]) : _e()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 源码中找答案&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;compiler/codegen/index.js &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="https://yangyfeng.github.io/blogpost/tags/vue/"/>
    
      <category term="面试题" scheme="https://yangyfeng.github.io/blogpost/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>面试题集锦（2）</title>
    <link href="https://yangyfeng.github.io//posts/63fad71d.html"/>
    <id>https://yangyfeng.github.io//posts/63fad71d.html</id>
    <published>2020-12-16T16:00:00.000Z</published>
    <updated>2020-12-22T09:31:10.544Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;web安全攻击手段有哪些？以及如何防范&quot;&gt;&lt;a href=&quot;#web安全攻击手段有哪些？以及如何防范&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="面试题" scheme="https://yangyfeng.github.io/blogpost/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>深入前端模块化</title>
    <link href="https://yangyfeng.github.io//posts/c00659d0.html"/>
    <id>https://yangyfeng.github.io//posts/c00659d0.html</id>
    <published>2020-12-15T16:00:00.000Z</published>
    <updated>2020-12-22T09:32:18.050Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;什么是前端的模块化？理解的不太透彻。&lt;/p&gt;
&lt;p&gt;平常一直用的也只有ES6模块化，对于其他几种模块化规范用的也少，理解不够深，但是经常会见到一些面试题是问这几种模块化规范的区别，所以这次做一个整理总结&lt;/p&gt;
&lt;h1 id=&quot;一、对于模块化的理解&quot;&gt;&lt;a href=&quot;#一、对于模块化的理解&quot; class=&quot;headerlink&quot; title=&quot;一、对于模块化的理解&quot;&gt;&lt;/a&gt;一、对于模块化的理解&lt;/h1&gt;&lt;h2 id=&quot;1、什么是模块化？&quot;&gt;&lt;a href=&quot;#1、什么是模块化？&quot; class=&quot;headerlink&quot; title=&quot;1、什么是模块化？&quot;&gt;&lt;/a&gt;1、什么是模块化？&lt;/h2&gt;&lt;p&gt;模块化开发是一种管理方式，是一种生产方式，一种解决问题的方案，一个模块就是实现特定功能的文件，有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块，但是模块开发需要遵循一定的规范，否则就都乱套了，因此，才有了后来大家熟悉的AMD规范，CMD规范，以及ES6自带的模块化规范&lt;/p&gt;
&lt;h2 id=&quot;2、模块化带来的好处？&quot;&gt;&lt;a href=&quot;#2、模块化带来的好处？&quot; class=&quot;headerlink&quot; title=&quot;2、模块化带来的好处？&quot;&gt;&lt;/a&gt;2、模块化带来的好处？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;解决命名冲突&lt;/li&gt;
&lt;li&gt;提供复用性&lt;/li&gt;
&lt;li&gt;提高代码可维护性&lt;/li&gt;
&lt;li&gt;灵活架构，焦点分离，方便模块间组合、分解&lt;/li&gt;
&lt;li&gt;多人协作互不干扰&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3、模块化规范的发展进程&quot;&gt;&lt;a href=&quot;#3、模块化规范的发展进程&quot; class=&quot;headerlink&quot; title=&quot;3、模块化规范的发展进程&quot;&gt;&lt;/a&gt;3、模块化规范的发展进程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原始写法（全局function）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;模块就是实现特定**功能的一组方法，只要把不同的函数（以及记录状态的变量）简单的放在一起，就算是一个模块。&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;m1&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;m2&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;这样写上面的函数 m1() 和 m2() ，组成了一个模块，在使用的时候直接调用就可以了。
但是带来的问题也很明显：&amp;quot;污染&amp;quot;了全局变量 ，无法保证不与其他模块发生变量名冲突，而且模块成员之间看不出直接关系&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;namespace写法（简单对象）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决上面写法带来的缺点，可以吧模块写成一个对象，所有的模块成员都放到这个对象里面，这样减少了全局变量，减少命名冲突&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; myModule = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  count: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  m1: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;m1:&#39;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  m2: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;m2:&#39;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.count)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myModule.m1() &lt;span class=&quot;comment&quot;&gt;// m1:0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 改变模块内部状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myModule.count = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myModule.m1() &lt;span class=&quot;comment&quot;&gt;// m1:5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;上面的函数 m1 和 m2 ，都封装在myModule对象里。使用的时候，就是调用这个对象的属性。但是，这样的写法会暴露所有模块成员，内部状态可以被外部改写。比如，外部代码可以直接改变内部计数器的值。&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;立即执行函数写法（匿名函数自执行 ，闭包）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; myModule = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; m1 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;m1:&#39;&lt;/span&gt; + count)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; m2 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;m2:&#39;&lt;/span&gt; + count)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; m1, m2 &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这样写在外面就无法读取内部的 count 变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(myModule.count); &lt;span class=&quot;comment&quot;&gt;// undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;立即执行函数增强(引入依赖)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; myModule = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;($)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 这里面就可以使用JQuery&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)(JQuery)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这样做除了保证模块的独立性，还使得模块之间的依赖关系变得明显&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端" scheme="https://yangyfeng.github.io/blogpost/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端工程化" scheme="https://yangyfeng.github.io/blogpost/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
      <category term="模块化" scheme="https://yangyfeng.github.io/blogpost/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
</feed>
